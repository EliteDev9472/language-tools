[
  {
    "name": "v-text",
    "description": {
      "kind": "markdown",
      "value": "\n更新元素的文本內容。\n\n- **期望的綁定值類型：**`string`\n\n- **詳細信息**\n\n  `v-text` 通過設置元素的 [textContent](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent) 屬性來工作，因此它將覆蓋元素中所有現有的內容。如果你需要更新 `textContent` 的部分，應該使用 [mustache interpolations](https://cn.vuejs.org/guide/essentials/template-syntax.html#text-interpolation) 代替。\n\n- **示例**\n\n  ```html\n  <span v-text=\"msg\"></span>\n  <!-- 等同於 -->\n  <span>{{msg}}</span>\n  ```\n\n- **參考**：[模板語法 - 文本插值](https://cn.vuejs.org/guide/essentials/template-syntax.html#text-interpolation)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-text"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-text"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-text"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-text"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-text"
      }
    ]
  },
  {
    "name": "v-html",
    "description": {
      "kind": "markdown",
      "value": "\n更新元素的 [innerHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)。\n\n- **期望的綁定值類型：**`string`\n\n- **詳細信息**\n\n `v-html` 的內容直接作爲普通 HTML 插入—— Vue 模板語法是不會被解析的。如果你發現自己正打算用 `v-html` 來編寫模板，不如重新想想怎麼使用組件來代替。\n\n ::: warning 安全說明\n 在你的站點上動態渲染任意的 HTML 是非常危險的，因爲它很容易導致 [XSS 攻擊](https://en.wikipedia.org/wiki/Cross-site_scripting)。請只對可信內容使用 HTML 插值，**絕不要**將用戶提供的內容作爲插值\n  :::\n\n 在[單文件組件](https://cn.vuejs.org/guide/scaling-up/sfc.html)，`scoped` 樣式將不會作用於 `v-html` 裏的內容，因爲 HTML 內容不會被 Vue 的模板編譯器解析。如果你想讓 `v-html` 的內容也支持 scoped CSS，你可以使用 [CSS modules](./sfc-css-features.html#css-modules) 或使用一個額外的全局 `<style>` 元素，手動設置類似 BEM 的作用域策略。\n\n- **示例：**\n\n  ```html\n  <div v-html=\"html\"></div>\n  ```\n\n- **參考**：[模板語法 - 原始 HTML](https://cn.vuejs.org/guide/essentials/template-syntax.html#raw-html)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-html"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-html"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-html"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-html"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-html"
      }
    ]
  },
  {
    "name": "v-show",
    "description": {
      "kind": "markdown",
      "value": "\n基於表達式值的真假性，來改變元素的可見性。\n\n- **期望的綁定值類型：**`any`\n\n- **詳細信息**\n\n  `v-show` 通過設置內聯樣式的 `display` CSS 屬性來工作，當元素可見時將使用初始 `display` 值。當條件改變時，也會觸發過渡效果。\n\n- **參考**：[條件渲染 - v-show](https://cn.vuejs.org/guide/essentials/conditional.html#v-show)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-show"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-show"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-show"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-show"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-show"
      }
    ]
  },
  {
    "name": "v-if",
    "description": {
      "kind": "markdown",
      "value": "\n基於表達式值的真假性，來條件性地渲染元素或者模板片段。\n\n- **期望的綁定值類型：**`any`\n\n- **詳細信息**\n\n  當 `v-if` 元素被觸發，元素及其所包含的指令/組件都會銷燬和重構。如果初始條件是假，那麼其內部的內容根本都不會被渲染。\n\n  可用於 `<template>` 表示僅包含文本或多個元素的條件塊。\n\n  當條件改變時會觸發過渡效果。\n\n  當同時使用時，`v-if` 比 `v-for` 優先級更高。我們並不推薦在一元素上同時使用這兩個指令 — 查看[列表渲染指南](https://cn.vuejs.org/guide/essentials/list.html#v-for-with-v-if)詳情。\n\n- **參考**：[條件渲染 - v-if](https://cn.vuejs.org/guide/essentials/conditional.html#v-if)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-if"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-if"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-if"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-if"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-if"
      }
    ]
  },
  {
    "name": "v-else",
    "valueSet": "v",
    "description": {
      "kind": "markdown",
      "value": "\n表示 `v-if` 或 `v-if` / `v-else-if` 鏈式調用的“else 塊”。\n\n- **無需傳入表達式**\n\n- **詳細信息**\n\n  - 限定：上一個兄弟元素必須有 `v-if` 或 `v-else-if`。\n\n  - 可用於 `<template>` 表示僅包含文本或多個元素的條件塊。\n\n- **示例**\n\n  ```html\n  <div v-if=\"Math.random() > 0.5\">\n    Now you see me\n  </div>\n  <div v-else>\n    Now you don't\n  </div>\n  ```\n\n- **參考**：[條件渲染 - v-else](https://cn.vuejs.org/guide/essentials/conditional.html#v-else)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-else"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-else"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-else"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-else"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-else"
      }
    ]
  },
  {
    "name": "v-else-if",
    "description": {
      "kind": "markdown",
      "value": "\n表示 `v-if` 的“else if 塊”。可以進行鏈式調用。\n\n- **期望的綁定值類型：**`any`\n\n- **詳細信息**\n\n  - 限定：上一個兄弟元素必須有 `v-if` 或 `v-else-if`。\n\n  - 可用於 `<template>` 表示僅包含文本或多個元素的條件塊。\n\n- **示例**\n\n  ```html\n  <div v-if=\"type === 'A'\">\n    A\n  </div>\n  <div v-else-if=\"type === 'B'\">\n    B\n  </div>\n  <div v-else-if=\"type === 'C'\">\n    C\n  </div>\n  <div v-else>\n    Not A/B/C\n  </div>\n  ```\n\n- **參考**：[條件渲染 - v-else-if](https://cn.vuejs.org/guide/essentials/conditional.html#v-else-if)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-else-if"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-else-if"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-else-if"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-else-if"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-else-if"
      }
    ]
  },
  {
    "name": "v-for",
    "description": {
      "kind": "markdown",
      "value": "\n基於原始數據多次渲染元素或模板塊。\n\n- **期望的綁定值類型：**`Array | Object | number | string | Iterable`\n\n- **詳細信息**\n\n  指令值必須使用特殊語法 `alias in expression` 爲正在迭代的元素提供一個別名：\n\n  ```html\n  <div v-for=\"item in items\">\n    {{ item.text }}\n  </div>\n  ```\n\n  或者，你也可以爲索引指定別名 (如果用在對象，則是鍵值)：\n\n  ```html\n  <div v-for=\"(item, index) in items\"></div>\n  <div v-for=\"(value, key) in object\"></div>\n  <div v-for=\"(value, name, index) in object\"></div>\n  ```\n\n  `v-for` 的默認方式是嘗試就地更新元素而不移動它們。要強制其重新排序元素，你需要用特殊 attribute `key` 來提供一個排序提示：\n\n  ```html\n  <div v-for=\"item in items\" :key=\"item.id\">\n    {{ item.text }}\n  </div>\n  ```\n\n  `v-for` 也可以用於 [Iterable Protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol) 的實現，包括原生 `Map` 和 `Set`。\n\n- **參考：**\n  - [列表渲染](https://cn.vuejs.org/guide/essentials/list.html)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-for"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-for"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-for"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-for"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-for"
      }
    ]
  },
  {
    "name": "v-on",
    "description": {
      "kind": "markdown",
      "value": "\n給元素綁定事件監聽器。\n\n- **縮寫：**`@`\n\n- **期望的綁定值類型：**`Function | Inline Statement | Object (不帶參數)`\n\n- **參數：**`event` (使用對象語法則爲可選項)\n\n- **修飾符：**\n\n  - `.stop` - 調用 `event.stopPropagation()`。\n  - `.prevent` - 調用 `event.preventDefault()`。\n  - `.capture` - 在捕獲模式添加事件監聽器。\n  - `.self` - 只有事件從元素本身發出才觸發處理函數。\n  - `.{keyAlias}` - 只在某些按鍵下觸發處理函數。\n  - `.once` - 最多觸發一次處理函數。\n  - `.left` - 只在鼠標左鍵事件觸發處理函數。\n  - `.right` - 只在鼠標右鍵事件觸發處理函數。\n  - `.middle` - 只在鼠標中鍵事件觸發處理函數。\n  - `.passive` - 通過 `{ passive: true }` 附加一個 DOM 事件。\n\n- **詳細信息**\n\n  事件類型由參數來指定。表達式可以是一個方法名，一個內聯聲明，如果有修飾符則可省略。\n\n  當用於普通元素，只監聽[**原生 DOM 事件**](https://developer.mozilla.org/en-US/docs/Web/Events)。當用於自定義元素組件，則監聽子組件觸發的**自定義事件**。\n\n  當監聽原生 DOM 事件時，方法接收原生事件作爲唯一參數。如果使用內聯聲明，聲明可以訪問一個特殊的 `$event` 變量：`v-on:click=\"handle('ok', $event)\"`。\n\n  `v-on` 還支持綁定不帶參數的事件/監聽器對的對象。請注意，當使用對象語法時，不支持任何修飾符。\n\n- **示例：**\n\n  ```html\n  <!-- 方法處理函數 -->\n  <button v-on:click=\"doThis\"></button>\n\n  <!-- 動態事件 -->\n  <button v-on:[event]=\"doThis\"></button>\n\n  <!-- 內聯聲明 -->\n  <button v-on:click=\"doThat('hello', $event)\"></button>\n\n  <!-- 縮寫 -->\n  <button @click=\"doThis\"></button>\n\n  <!-- 使用縮寫的動態事件 -->\n  <button @[event]=\"doThis\"></button>\n\n  <!-- 停止傳播 -->\n  <button @click.stop=\"doThis\"></button>\n\n  <!-- 阻止默認事件 -->\n  <button @click.prevent=\"doThis\"></button>\n\n  <!-- 不帶表達式地阻止默認事件 -->\n  <form @submit.prevent></form>\n\n  <!-- 鏈式調用修飾符 -->\n  <button @click.stop.prevent=\"doThis\"></button>\n\n  <!-- 按鍵用於 keyAlias 修飾符-->\n  <input @keyup.enter=\"onEnter\" />\n\n  <!-- 點擊事件將最多觸發一次 -->\n  <button v-on:click.once=\"doThis\"></button>\n\n  <!-- 對象語法 -->\n  <button v-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>\n  ```\n\n  監聽子組件的自定義事件 (當子組件的“my-event”事件被觸發，處理函數將被調用)：\n\n  ```html\n  <MyComponent @my-event=\"handleThis\" />\n\n  <!-- 內聯聲明 -->\n  <MyComponent @my-event=\"handleThis(123, $event)\" />\n  ```\n\n- **參考：**\n  - [事件處理](https://cn.vuejs.org/guide/essentials/event-handling.html)\n  - [組件 - 自定義事件](https://cn.vuejs.org/guide/essentials/component-basics.html#listening-to-events)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-on"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-on"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-on"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-on"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-on"
      }
    ]
  },
  {
    "name": "v-bind",
    "description": {
      "kind": "markdown",
      "value": "\n動態的綁定一個或多個 attribute，也可以是組件的 prop。\n\n- **縮寫：**`:` 或者 `.` (當使用 `.prop` 修飾符)\n\n- **期望：**`any (帶參數) | Object (不帶參數)`\n\n- **參數：**`attrOrProp (可選的)`\n\n- **修飾符：**\n\n  - `.camel` - 將短橫線命名的 attribute 轉變爲駝峯式命名。\n  - `.prop` - 強制綁定爲 DOM property。<sup class=\"vt-badge\">3.2+</sup>\n  - `.attr` - 強制綁定爲 DOM attribute。<sup class=\"vt-badge\">3.2+</sup>\n\n- **用途：**\n\n  當用於綁定 `class` 或 `style` attribute，`v-bind` 支持額外的值類型如數組或對象。詳見下方的指南鏈接。\n\n  在處理綁定時，Vue 默認會利用 `in` 操作符來檢查該元素上是否定義了和綁定的 key 同名的 DOM property。如果存在同名的 property，則 Vue 會把作爲 DOM property 賦值，而不是作爲 attribute 設置。這個行爲在大多數情況都符合期望的綁定值類型，但是你也可以顯式用 `.prop` 和 `.attr` 修飾符來強制綁定方式。有時這是必要的，特別是在和[自定義元素](https://cn.vuejs.org/guide/extras/web-components.html#passing-dom-properties)打交道時。\n\n  當用於組件 props 綁定時，所綁定的 props 必須在子組件中已被正確聲明。\n\n  當不帶參數使用時，可以用於綁定一個包含了多個 attribute 名稱-綁定值對的對象。\n\n- **示例：**\n\n  ```html\n  <!-- 綁定 attribute -->\n  <img v-bind:src=\"imageSrc\" />\n\n  <!-- 動態 attribute 名 -->\n  <button v-bind:[key]=\"value\"></button>\n\n  <!-- 縮寫 -->\n  <img :src=\"imageSrc\" />\n\n  <!-- 縮寫形式的動態 attribute 名 -->\n  <button :[key]=\"value\"></button>\n\n  <!-- 內聯字符串拼接 -->\n  <img :src=\"'/path/to/images/' + fileName\" />\n\n  <!-- class 綁定 -->\n  <div :class=\"{ red: isRed }\"></div>\n  <div :class=\"[classA, classB]\"></div>\n  <div :class=\"[classA, { classB: isB, classC: isC }]\"></div>\n\n  <!-- style 綁定 -->\n  <div :style=\"{ fontSize: size + 'px' }\"></div>\n  <div :style=\"[styleObjectA, styleObjectB]\"></div>\n\n  <!-- 綁定對象形式的 attribute -->\n  <div v-bind=\"{ id: someProp, 'other-attr': otherProp }\"></div>\n\n  <!-- prop 綁定。“prop” 必須在子組件中已聲明。 -->\n  <MyComponent :prop=\"someThing\" />\n\n  <!-- 傳遞子父組件共有的 prop -->\n  <MyComponent v-bind=\"$props\" />\n\n  <!-- XLink -->\n  <svg><a :xlink:special=\"foo\"></a></svg>\n  ```\n\n  `.prop` 修飾符也有專門的縮寫，`.`：\n\n  ```html\n  <div :someProperty.prop=\"someObject\"></div>\n\n  <!-- 等同於 -->\n  <div .someProperty=\"someObject\"></div>\n  ```\n\n  當在 DOM 內模板使用 `.camel` 修飾符，可以駝峯化 `v-bind` attribute 的名稱，例如 SVG `viewBox` attribute：\n\n  ```html\n  <svg :view-box.camel=\"viewBox\"></svg>\n  ```\n\n  如果使用字符串模板或使用構建步驟預編譯模板，則不需要 `.camel`。\n\n- **參考：**\n  - [Class 與 Style 綁定](https://cn.vuejs.org/guide/essentials/class-and-style.html)\n  - [組件 -  Prop 傳遞細節](https://cn.vuejs.org/guide/components/props.html#prop-passing-details)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-bind"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-bind"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-bind"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-bind"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-bind"
      }
    ]
  },
  {
    "name": "v-model",
    "description": {
      "kind": "markdown",
      "value": "\n在表單輸入元素或組件上創建雙向綁定。\n\n- **期望的綁定值類型**：根據表單輸入元素或組件輸出的值而變化\n\n- **僅限：**\n\n  - `<input>`\n  - `<select>`\n  - `<textarea>`\n  - components\n\n- **修飾符：**\n\n  - [`.lazy`](https://cn.vuejs.org/guide/essentials/forms.html#lazy) - 監聽 `change` 事件而不是 `input`\n  - [`.number`](https://cn.vuejs.org/guide/essentials/forms.html#number) - 將輸入的合法符串轉爲數字\n  - [`.trim`](https://cn.vuejs.org/guide/essentials/forms.html#trim) - 移除輸入內容兩端空格\n\n- **參考：**\n\n  - [表單輸入綁定](https://cn.vuejs.org/guide/essentials/forms.html)\n  - [組件事件 - 配合 `v-model` 使用](https://cn.vuejs.org/guide/components/v-model.html)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-model"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-model"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-model"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-model"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-model"
      }
    ]
  },
  {
    "name": "v-slot",
    "description": {
      "kind": "markdown",
      "value": "\n用於聲明具名插槽或是期望接收 props 的作用域插槽。\n\n- **縮寫：**`#`\n\n- **期望的綁定值類型**：能夠合法在函數參數位置使用的 JavaScript 表達式。支持解構語法。綁定值是可選的——只有在給作用域插槽傳遞 props 才需要。\n\n- **參數**：插槽名 (可選，默認是 `default`)\n\n- **僅限：**\n\n  - `<template>`\n  - [components](https://cn.vuejs.org/guide/components/slots.html#scoped-slots) (用於帶有 prop 的單個默認插槽)\n\n- **示例：**\n\n  ```html\n  <!-- 具名插槽 -->\n  <BaseLayout>\n    <template v-slot:header>\n      Header content\n    </template>\n\n    <template v-slot:default>\n      Default slot content\n    </template>\n\n    <template v-slot:footer>\n      Footer content\n    </template>\n  </BaseLayout>\n\n  <!-- 接收 prop 的具名插槽 -->\n  <InfiniteScroll>\n    <template v-slot:item=\"slotProps\">\n      <div class=\"item\">\n        {{ slotProps.item.text }}\n      </div>\n    </template>\n  </InfiniteScroll>\n\n  <!-- 接收 prop 的默認插槽，並解構 -->\n  <Mouse v-slot=\"{ x, y }\">\n    Mouse position: {{ x }}, {{ y }}\n  </Mouse>\n  ```\n\n- **參考：**\n  - [組件 - 插槽](https://cn.vuejs.org/guide/components/slots.html)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-slot"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-slot"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-slot"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-slot"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-slot"
      }
    ]
  },
  {
    "name": "v-pre",
    "description": {
      "kind": "markdown",
      "value": "\n跳過該元素及其所有子元素的編譯。\n\n- **無需傳入**\n\n- **詳細信息**\n\n  元素內具有 `v-pre`，所有 Vue 模板語法都會被保留並按原樣渲染。最常見的用例就是顯示原始雙大括號標籤及內容。\n\n- **示例：**\n\n  ```html\n  <span v-pre>{{ this will not be compiled }}</span>\n  ```\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-pre"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-pre"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-pre"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-pre"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-pre"
      }
    ]
  },
  {
    "name": "v-once",
    "description": {
      "kind": "markdown",
      "value": "\n僅渲染元素和組件一次，並跳過之後的更新。\n\n- **無需傳入**\n\n- **詳細信息**\n\n  在隨後的重新渲染，元素/組件及其所有子項將被當作靜態內容並跳過渲染。這可以用來優化更新時的性能。\n\n  ```html\n  <!-- 單個元素 -->\n  <span v-once>This will never change: {{msg}}</span>\n  <!-- 帶有子元素的元素 -->\n  <div v-once>\n    <h1>comment</h1>\n    <p>{{msg}}</p>\n  </div>\n  <!-- 組件 -->\n  <MyComponent v-once :comment=\"msg\" />\n  <!-- `v-for` 指令 -->\n  <ul>\n    <li v-for=\"i in list\" v-once>{{i}}</li>\n  </ul>\n  ```\n\n  從 3.2 起，你也可以搭配 [`v-memo`](#v-memo) 的無效條件來緩存部分模板。\n\n- **參考：**\n  - [數據綁定語法 - 插值](https://cn.vuejs.org/guide/essentials/template-syntax.html#text-interpolation)\n  - [v-memo](#v-memo)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-once"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-once"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-once"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-once"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-once"
      }
    ]
  },
  {
    "name": "v-memo",
    "description": {
      "kind": "markdown",
      "value": "\n- **期望的綁定值類型：**`any[]`\n\n- **詳細信息**\n\n  緩存一個模板的子樹。在元素和組件上都可以使用。爲了實現緩存，該指令需要傳入一個固定長度的依賴值數組進行比較。如果數組裏的每個值都與最後一次的渲染相同，那麼整個子樹的更新將被跳過。舉例來說：\n\n  ```html\n  <div v-memo=\"[valueA, valueB]\">\n    ...\n  </div>\n  ```\n\n  當組件重新渲染，如果 `valueA` 和 `valueB` 都保持不變，這個 `<div>` 及其子項的所有更新都將被跳過。實際上，甚至虛擬 DOM 的 vnode 創建也將被跳過，因爲緩存的子樹副本可以被重新使用。\n\n  正確指定緩存數組很重要，否則應該生效的更新可能被跳過。`v-memo` 傳入空依賴數組 (`v-memo=\"[]\"`) 將與 `v-once` 效果相同。\n\n  **與 `v-for` 一起使用**\n\n  `v-memo` 僅用於性能至上場景中的微小優化，應該很少需要。最常見的情況可能是有助於渲染海量 `v-for` 列表 (長度超過 1000 的情況)：\n\n  ```html\n  <div v-for=\"item in list\" :key=\"item.id\" v-memo=\"[item.id === selected]\">\n    <p>ID: {{ item.id }} - selected: {{ item.id === selected }}</p>\n    <p>...more child nodes</p>\n  </div>\n  ```\n\n  當組件的 `selected` 狀態改變，默認會重新創建大量的 vnode，儘管絕大部分都跟之前是一模一樣的。`v-memo` 用在這裏本質上是在說“只有當該項的被選中狀態改變時才需要更新”。這使得每個選中狀態沒有變的項能完全重用之前的 vnode 並跳過差異比較。注意這裏 memo 依賴數組中並不需要包含 `item.id`，因爲 Vue 也會根據 item 的 `:key` 進行判斷。\n\n  :::warning 警告\n  當搭配 `v-for` 使用 `v-memo`，確保兩者都綁定在同一個元素上。**`v-memo` 不能用在 `v-for` 內部。**\n  :::\n\n  `v-memo` 也能被用於在一些默認優化失敗的邊際情況下，手動避免子組件出現不需要的更新。但是一樣的，開發者需要負責指定正確的依賴數組以免跳過必要的更新。\n\n- **參考：**\n  - [v-once](#v-once)\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-memo"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-memo"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-memo"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-memo"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-memo"
      }
    ]
  },
  {
    "name": "v-cloak",
    "description": {
      "kind": "markdown",
      "value": "\n用於隱藏尚未完成編譯的 DOM 模板。\n\n- **無需傳入**\n\n- **詳細信息**\n\n  **該指令只在沒有構建步驟的環境下需要使用。**\n\n  當使用直接在 DOM 中書寫的模板時，可能會出現一種叫做“未編譯模板閃現”的情況：用戶可能先看到的是還沒編譯完成的雙大括號標籤，直到掛載的組件將它們替換爲實際渲染的內容。\n\n  `v-cloak` 會保留在所綁定的元素上，直到相關組件實例被掛載後才移除。配合像 `[v-cloak] { display: none }` 這樣的 CSS 規則，它可以在組件編譯完畢前隱藏原始模板。\n\n- **示例：**\n\n  ```css\n  [v-cloak] {\n    display: none;\n  }\n  ```\n\n  ```html\n  <div v-cloak>\n    {{ message }}\n  </div>\n  ```\n\n  直到編譯完成前，`<div>` 將不可見。\n"
    },
    "references": [
      {
        "name": "en",
        "url": "https://vuejs.org/api/built-in-directives.html#v-cloak"
      },
      {
        "name": "zh-cn",
        "url": "https://cn.vuejs.org/api/built-in-directives.html#v-cloak"
      },
      {
        "name": "ja",
        "url": "https://ja.vuejs.org/api/built-in-directives.html#v-cloak"
      },
      {
        "name": "ua",
        "url": "https://ua.vuejs.org/api/built-in-directives.html#v-cloak"
      },
      {
        "name": "fr",
        "url": "https://fr.vuejs.org/api/built-in-directives.html#v-cloak"
      }
    ]
  }
]